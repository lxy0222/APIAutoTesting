{"name": "create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM", "status": "broken", "statusDetails": {"message": "requests.exceptions.ConnectionError: ('Connection aborted.', OSError(0, 'Error'))", "trace": "self = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nmethod = 'POST', url = '/itg/rest/dm/requests', body = b'{}'\nheaders = {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection...p-alive', 'Content-Length': '2', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46IVFBWkBXU1gzZWRj'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=120, read=120, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = Timeout(connect=120, read=120, total=None)\nis_new_proxy_conn = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parse_url(url).url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == \"http\":\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:677: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nconn = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\nmethod = 'POST', url = '/itg/rest/dm/requests'\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False\nhttplib_request_kw = {'body': b'{}', 'headers': {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'app...-alive', 'Content-Length': '2', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46IVFBWkBXU1gzZWRj'}}\ntimeout_obj = Timeout(connect=120, read=120, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nconn = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, \"sock\", None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\n\n    def connect(self):\n        # Add certificate verification\n        conn = self._new_conn()\n        hostname = self.host\n    \n        # Google App Engine's httplib does not define _tunnel_host\n        if getattr(self, \"_tunnel_host\", None):\n            self.sock = conn\n            # Calls self._set_hostport(), so self.host is\n            # self._tunnel_host below.\n            self._tunnel()\n            # Mark this connection as not reusable\n            self.auto_open = 0\n    \n            # Override the host with the one we're requesting data from.\n            hostname = self._tunnel_host\n    \n        server_hostname = hostname\n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn(\n                (\n                    \"System time is way off (before {0}). This will probably \"\n                    \"lead to SSL verification errors\"\n                ).format(RECENT_DATE),\n                SystemTimeWarning,\n            )\n    \n        # Wrap socket using verification with the root certs in\n        # trusted_root_certs\n        default_ssl_context = False\n        if self.ssl_context is None:\n            default_ssl_context = True\n            self.ssl_context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(self.ssl_version),\n                cert_reqs=resolve_cert_reqs(self.cert_reqs),\n            )\n    \n        context = self.ssl_context\n        context.verify_mode = resolve_cert_reqs(self.cert_reqs)\n    \n        # Try to load OS default certs if none are given.\n        # Works well on Windows (requires Python3.4+)\n        if (\n            not self.ca_certs\n            and not self.ca_cert_dir\n            and not self.ca_cert_data\n            and default_ssl_context\n            and hasattr(context, \"load_default_certs\")\n        ):\n            context.load_default_certs()\n    \n        self.sock = ssl_wrap_socket(\n            sock=conn,\n            keyfile=self.key_file,\n            certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            ca_cert_data=self.ca_cert_data,\n            server_hostname=server_hostname,\n>           ssl_context=context,\n        )\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connection.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nkeyfile = None, certfile = None, cert_reqs = None\nca_certs = 'D:\\\\env\\\\python3.7\\\\lib\\\\site-packages\\\\certifi\\\\cacert.pem'\nserver_hostname = 'jingrantest.dev.mfspm.com', ssl_version = None\nciphers = None, ssl_context = <ssl.SSLContext object at 0x000002017A88DCF8>\nca_cert_dir = None, key_password = None, ca_cert_data = None\n\n    def ssl_wrap_socket(\n        sock,\n        keyfile=None,\n        certfile=None,\n        cert_reqs=None,\n        ca_certs=None,\n        server_hostname=None,\n        ssl_version=None,\n        ciphers=None,\n        ssl_context=None,\n        ca_cert_dir=None,\n        key_password=None,\n        ca_cert_data=None,\n    ):\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n        the same meaning as they do when using :func:`ssl.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        :param key_password:\n            Optional password if the keyfile is encrypted.\n        :param ca_cert_data:\n            Optional string containing CA certificates in PEM format suitable for\n            passing as the cadata parameter to SSLContext.load_verify_locations()\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are no longer\n            # used by urllib3 itself. We should consider deprecating and removing\n            # this code.\n            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir or ca_cert_data:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)\n            except IOError as e:  # Platform-specific: Python 2.7\n                raise SSLError(e)\n            # Py33 raises FileNotFoundError which subclasses OSError\n            # These are not equivalent unless we check the errno attribute\n            except OSError as e:  # Platform-specific: Python 3.3 and beyond\n                if e.errno == errno.ENOENT:\n                    raise SSLError(e)\n                raise\n    \n        elif ssl_context is None and hasattr(context, \"load_default_certs\"):\n            # try to load OS default certs; works well on Windows (require Python3.4+)\n            context.load_default_certs()\n    \n        # Attempt to detect if we get the goofy behavior of the\n        # keyfile being encrypted and OpenSSL asking for the\n        # passphrase via the terminal and instead error out.\n        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):\n            raise SSLError(\"Client private key is encrypted, password is required\")\n    \n        if certfile:\n            if key_password is None:\n                context.load_cert_chain(certfile, keyfile)\n            else:\n                context.load_cert_chain(certfile, keyfile, key_password)\n    \n        # If we detect server_hostname is an IP address then the SNI\n        # extension should not be used according to RFC3546 Section 3.1\n        # We shouldn't warn the user if SNI isn't available but we would\n        # not be using SNI anyways due to IP address for server_hostname.\n        if (\n            server_hostname is not None and not is_ipaddress(server_hostname)\n        ) or IS_SECURETRANSPORT:\n            if HAS_SNI and server_hostname is not None:\n>               return context.wrap_socket(sock, server_hostname=server_hostname)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\util\\ssl_.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLContext object at 0x000002017A88DCF8>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'jingrantest.dev.mfspm.com', session = None\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True,\n                    suppress_ragged_eofs=True,\n                    server_hostname=None, session=None):\n        # SSLSocket class handles server_hostname encoding before it calls\n        # ctx._wrap_socket()\n        return self.sslsocket_class._create(\n            sock=sock,\n            server_side=server_side,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs,\n            server_hostname=server_hostname,\n            context=self,\n>           session=session\n        )\n\nD:\\env\\python3.7\\lib\\ssl.py:423: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'ssl.SSLSocket'>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'jingrantest.dev.mfspm.com'\ncontext = <ssl.SSLContext object at 0x000002017A88DCF8>, session = None\n\n    @classmethod\n    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,\n                suppress_ragged_eofs=True, server_hostname=None,\n                context=None, session=None):\n        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:\n            raise NotImplementedError(\"only stream sockets are supported\")\n        if server_side:\n            if server_hostname:\n                raise ValueError(\"server_hostname can only be specified \"\n                                 \"in client mode\")\n            if session is not None:\n                raise ValueError(\"session can only be specified in \"\n                                 \"client mode\")\n        if context.check_hostname and not server_hostname:\n            raise ValueError(\"check_hostname requires server_hostname\")\n    \n        kwargs = dict(\n            family=sock.family, type=sock.type, proto=sock.proto,\n            fileno=sock.fileno()\n        )\n        self = cls.__new__(cls, **kwargs)\n        super(SSLSocket, self).__init__(**kwargs)\n        self.settimeout(sock.gettimeout())\n        sock.detach()\n    \n        self._context = context\n        self._session = session\n        self._closed = False\n        self._sslobj = None\n        self.server_side = server_side\n        self.server_hostname = context._encode_hostname(server_hostname)\n        self.do_handshake_on_connect = do_handshake_on_connect\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n    \n        # See if we are connected\n        try:\n            self.getpeername()\n        except OSError as e:\n            if e.errno != errno.ENOTCONN:\n                raise\n            connected = False\n        else:\n            connected = True\n    \n        self._connected = connected\n        if connected:\n            # create the SSL object\n            try:\n                self._sslobj = self._context._wrap_socket(\n                    self, server_side, self.server_hostname,\n                    owner=self, session=self._session,\n                )\n                if do_handshake_on_connect:\n                    timeout = self.gettimeout()\n                    if timeout == 0.0:\n                        # non-blocking\n                        raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\n>                   self.do_handshake()\n\nD:\\env\\python3.7\\lib\\ssl.py:870: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           OSError: [Errno 0] Error\n\nD:\\env\\python3.7\\lib\\ssl.py:1139: OSError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002017A847848>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=120, read=120, total=None), verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nD:\\env\\python3.7\\lib\\site-packages\\requests\\adapters.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nmethod = 'POST', url = '/itg/rest/dm/requests', body = b'{}'\nheaders = {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection...p-alive', 'Content-Length': '2', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46IVFBWkBXU1gzZWRj'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=120, read=120, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = Timeout(connect=120, read=120, total=None)\nis_new_proxy_conn = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parse_url(url).url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == \"http\":\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw[\"request_method\"] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=response_conn,\n                retries=retries,\n                **response_kw\n            )\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except EmptyPoolError:\n            # Didn't get a connection from the pool, no need to clean up\n            clean_exit = True\n            release_this_conn = False\n            raise\n    \n        except (\n            TimeoutError,\n            HTTPException,\n            SocketError,\n            ProtocolError,\n            BaseSSLError,\n            SSLError,\n            CertificateError,\n        ) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError(\"Cannot connect to proxy.\", e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError(\"Connection aborted.\", e)\n    \n            retries = retries.increment(\n>               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:727: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'POST', url = '/itg/rest/dm/requests', response = None\nerror = ProtocolError('Connection aborted.', OSError(0, 'Error'))\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\n_stacktrace = <traceback object at 0x000002017A842508>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n>               raise six.reraise(type(error), error, _stacktrace)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\util\\retry.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\packages\\six.py:734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nmethod = 'POST', url = '/itg/rest/dm/requests', body = b'{}'\nheaders = {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection...p-alive', 'Content-Length': '2', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46IVFBWkBXU1gzZWRj'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=120, read=120, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = Timeout(connect=120, read=120, total=None)\nis_new_proxy_conn = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parse_url(url).url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == \"http\":\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:677: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nconn = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\nmethod = 'POST', url = '/itg/rest/dm/requests'\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False\nhttplib_request_kw = {'body': b'{}', 'headers': {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'app...-alive', 'Content-Length': '2', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46IVFBWkBXU1gzZWRj'}}\ntimeout_obj = Timeout(connect=120, read=120, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002017A84ED48>\nconn = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, \"sock\", None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connectionpool.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000002017A842E88>\n\n    def connect(self):\n        # Add certificate verification\n        conn = self._new_conn()\n        hostname = self.host\n    \n        # Google App Engine's httplib does not define _tunnel_host\n        if getattr(self, \"_tunnel_host\", None):\n            self.sock = conn\n            # Calls self._set_hostport(), so self.host is\n            # self._tunnel_host below.\n            self._tunnel()\n            # Mark this connection as not reusable\n            self.auto_open = 0\n    \n            # Override the host with the one we're requesting data from.\n            hostname = self._tunnel_host\n    \n        server_hostname = hostname\n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn(\n                (\n                    \"System time is way off (before {0}). This will probably \"\n                    \"lead to SSL verification errors\"\n                ).format(RECENT_DATE),\n                SystemTimeWarning,\n            )\n    \n        # Wrap socket using verification with the root certs in\n        # trusted_root_certs\n        default_ssl_context = False\n        if self.ssl_context is None:\n            default_ssl_context = True\n            self.ssl_context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(self.ssl_version),\n                cert_reqs=resolve_cert_reqs(self.cert_reqs),\n            )\n    \n        context = self.ssl_context\n        context.verify_mode = resolve_cert_reqs(self.cert_reqs)\n    \n        # Try to load OS default certs if none are given.\n        # Works well on Windows (requires Python3.4+)\n        if (\n            not self.ca_certs\n            and not self.ca_cert_dir\n            and not self.ca_cert_data\n            and default_ssl_context\n            and hasattr(context, \"load_default_certs\")\n        ):\n            context.load_default_certs()\n    \n        self.sock = ssl_wrap_socket(\n            sock=conn,\n            keyfile=self.key_file,\n            certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            ca_cert_data=self.ca_cert_data,\n            server_hostname=server_hostname,\n>           ssl_context=context,\n        )\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\connection.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nkeyfile = None, certfile = None, cert_reqs = None\nca_certs = 'D:\\\\env\\\\python3.7\\\\lib\\\\site-packages\\\\certifi\\\\cacert.pem'\nserver_hostname = 'jingrantest.dev.mfspm.com', ssl_version = None\nciphers = None, ssl_context = <ssl.SSLContext object at 0x000002017A88DCF8>\nca_cert_dir = None, key_password = None, ca_cert_data = None\n\n    def ssl_wrap_socket(\n        sock,\n        keyfile=None,\n        certfile=None,\n        cert_reqs=None,\n        ca_certs=None,\n        server_hostname=None,\n        ssl_version=None,\n        ciphers=None,\n        ssl_context=None,\n        ca_cert_dir=None,\n        key_password=None,\n        ca_cert_data=None,\n    ):\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n        the same meaning as they do when using :func:`ssl.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        :param key_password:\n            Optional password if the keyfile is encrypted.\n        :param ca_cert_data:\n            Optional string containing CA certificates in PEM format suitable for\n            passing as the cadata parameter to SSLContext.load_verify_locations()\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are no longer\n            # used by urllib3 itself. We should consider deprecating and removing\n            # this code.\n            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir or ca_cert_data:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)\n            except IOError as e:  # Platform-specific: Python 2.7\n                raise SSLError(e)\n            # Py33 raises FileNotFoundError which subclasses OSError\n            # These are not equivalent unless we check the errno attribute\n            except OSError as e:  # Platform-specific: Python 3.3 and beyond\n                if e.errno == errno.ENOENT:\n                    raise SSLError(e)\n                raise\n    \n        elif ssl_context is None and hasattr(context, \"load_default_certs\"):\n            # try to load OS default certs; works well on Windows (require Python3.4+)\n            context.load_default_certs()\n    \n        # Attempt to detect if we get the goofy behavior of the\n        # keyfile being encrypted and OpenSSL asking for the\n        # passphrase via the terminal and instead error out.\n        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):\n            raise SSLError(\"Client private key is encrypted, password is required\")\n    \n        if certfile:\n            if key_password is None:\n                context.load_cert_chain(certfile, keyfile)\n            else:\n                context.load_cert_chain(certfile, keyfile, key_password)\n    \n        # If we detect server_hostname is an IP address then the SNI\n        # extension should not be used according to RFC3546 Section 3.1\n        # We shouldn't warn the user if SNI isn't available but we would\n        # not be using SNI anyways due to IP address for server_hostname.\n        if (\n            server_hostname is not None and not is_ipaddress(server_hostname)\n        ) or IS_SECURETRANSPORT:\n            if HAS_SNI and server_hostname is not None:\n>               return context.wrap_socket(sock, server_hostname=server_hostname)\n\nD:\\env\\python3.7\\lib\\site-packages\\urllib3\\util\\ssl_.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLContext object at 0x000002017A88DCF8>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'jingrantest.dev.mfspm.com', session = None\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True,\n                    suppress_ragged_eofs=True,\n                    server_hostname=None, session=None):\n        # SSLSocket class handles server_hostname encoding before it calls\n        # ctx._wrap_socket()\n        return self.sslsocket_class._create(\n            sock=sock,\n            server_side=server_side,\n            do_handshake_on_connect=do_handshake_on_connect,\n            suppress_ragged_eofs=suppress_ragged_eofs,\n            server_hostname=server_hostname,\n            context=self,\n>           session=session\n        )\n\nD:\\env\\python3.7\\lib\\ssl.py:423: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'ssl.SSLSocket'>\nsock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = 'jingrantest.dev.mfspm.com'\ncontext = <ssl.SSLContext object at 0x000002017A88DCF8>, session = None\n\n    @classmethod\n    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,\n                suppress_ragged_eofs=True, server_hostname=None,\n                context=None, session=None):\n        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:\n            raise NotImplementedError(\"only stream sockets are supported\")\n        if server_side:\n            if server_hostname:\n                raise ValueError(\"server_hostname can only be specified \"\n                                 \"in client mode\")\n            if session is not None:\n                raise ValueError(\"session can only be specified in \"\n                                 \"client mode\")\n        if context.check_hostname and not server_hostname:\n            raise ValueError(\"check_hostname requires server_hostname\")\n    \n        kwargs = dict(\n            family=sock.family, type=sock.type, proto=sock.proto,\n            fileno=sock.fileno()\n        )\n        self = cls.__new__(cls, **kwargs)\n        super(SSLSocket, self).__init__(**kwargs)\n        self.settimeout(sock.gettimeout())\n        sock.detach()\n    \n        self._context = context\n        self._session = session\n        self._closed = False\n        self._sslobj = None\n        self.server_side = server_side\n        self.server_hostname = context._encode_hostname(server_hostname)\n        self.do_handshake_on_connect = do_handshake_on_connect\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n    \n        # See if we are connected\n        try:\n            self.getpeername()\n        except OSError as e:\n            if e.errno != errno.ENOTCONN:\n                raise\n            connected = False\n        else:\n            connected = True\n    \n        self._connected = connected\n        if connected:\n            # create the SSL object\n            try:\n                self._sslobj = self._context._wrap_socket(\n                    self, server_side, self.server_hostname,\n                    owner=self, session=self._session,\n                )\n                if do_handshake_on_connect:\n                    timeout = self.gettimeout()\n                    if timeout == 0.0:\n                        # non-blocking\n                        raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\n>                   self.do_handshake()\n\nD:\\env\\python3.7\\lib\\ssl.py:870: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', OSError(0, 'Error'))\n\nD:\\env\\python3.7\\lib\\ssl.py:1139: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Sync_portfolio_hierarchy_info_to_Octane_product_filed.TestEnd_To_End object at 0x000002017A768F08>\ncase_data = {'auth': None, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': [['equal_to', '$.na...on': ['step1:prepare a portfolio with sub-portfolio'], 'FunctionDesigner': 'CHEN'}, 'issue': 'create scenario 01', ...}\n\n    @allure.title(\"{case_data[title]}\")\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"Sync_portfolio_hierarchy_info_to_Octane_product_filed\")\n    def test_Sync_portfolio_hierarchy_info_to_Octane_product_filed(self, case_data):\n        des = f\"\"\"\n        <h1>{case_data[\"title\"]}</h1>\n        <table style=\"width:100%\" border=\"1\">\n            <tbody>\n                <tr>\n                    <th>Description</th>\n                    <td>{case_data['describe'][\"Description\"]}</td>\n                </tr>\n                <tr>\n                    <th>Function Designer</th>\n                    <td>{case_data['describe'][\"FunctionDesigner\"]}</td>\n                </tr>\n                <tr>\n                    <th>Author</th>\n                    <td>{case_data['describe'][\"Author\"]}</td>\n                </tr>\n                <tr>\n                    <th>Create Date</th>\n                    <td>{case_data['describe'][\"CreateDate\"]}</td>\n                </tr>\n            </tbody>\n        </table>\n        \"\"\"\n        if case_data.get('skip', False):\n            pytest.skip('This test is skipped.')\n        allure.dynamic.description_html(des)\n        allure.dynamic.tag(case_data['tag'])\n        allure.dynamic.issue(case_data['issue'])\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, case_data, relevance = init_premise(case_dict[\"test_info\"], case_data, case_path, self.response_data)\n        # 发送当前接口\n>       res, data = send_request(test_info, case_data)\n\nPyDemo\\testcase\\SPM\\SPM_END_TO_END\\test_Sync_portfolio_hierarchy_info_to_Octane_product_filed.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\apiSend.py:87: in send_request\n    timeout=timeout)\ncomm\\unit\\apiMethod.py:107: in post\n    cookies=cookies)\nD:\\env\\python3.7\\lib\\site-packages\\requests\\api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\nD:\\env\\python3.7\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\nD:\\env\\python3.7\\lib\\site-packages\\requests\\sessions.py:533: in request\n    resp = self.send(prep, **send_kwargs)\nD:\\env\\python3.7\\lib\\site-packages\\requests\\sessions.py:646: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002017A847848>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=120, read=120, total=None), verify = True, cert = None\nproxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7, use buffering of HTTP responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 3.3+\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n>           raise ConnectionError(err, request=request)\nE           requests.exceptions.ConnectionError: ('Connection aborted.', OSError(0, 'Error'))\n\nD:\\env\\python3.7\\lib\\site-packages\\requests\\adapters.py:498: ConnectionError"}, "descriptionHtml": "\n        <h1>create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM</h1>\n        <table style=\"width:100%\" border=\"1\">\n            <tbody>\n                <tr>\n                    <th>Description</th>\n                    <td>['step1:prepare a portfolio with sub-portfolio']</td>\n                </tr>\n                <tr>\n                    <th>Function Designer</th>\n                    <td>CHEN</td>\n                </tr>\n                <tr>\n                    <th>Author</th>\n                    <td>Xuanyu Liu</td>\n                </tr>\n                <tr>\n                    <th>Create Date</th>\n                    <td>1/5/2023'</td>\n                </tr>\n            </tbody>\n        </table>\n        ", "steps": [{"name": "setup function", "status": "passed", "steps": [{"name": "GET [get request types from api]", "status": "passed", "attachments": [{"name": "Host", "source": "627ccdda-47ff-4626-ad92-d2e59aef06ad-attachment.attach"}, {"name": "Path", "source": "b52af705-84ca-4350-a1e8-014fec552750-attachment.attach"}, {"name": "Headers", "source": "2e0ac6fb-92fe-49c7-ab36-32b2ee5d40ba-attachment.attach"}, {"name": "Parameters", "source": "74e54e49-6f7d-4aa3-a8ac-b159027a4158-attachment.attach"}, {"name": "Response headers", "source": "6660cb48-a5b2-4b8b-8b97-ee0e7d9b66c3-attachment.attach"}, {"name": "Response", "source": "69b5e5e4-3f1a-4fdd-8e3a-ff2f4888fa9d-attachment.attach"}], "start": 1688550432211, "stop": 1688550432224}], "parameters": [{"name": "test_info", "value": "{'epic': 'SPM', 'feature': 'END_TO_END', 'story': 'Sync_portfolio_hierarchy_info_to_Octane_product_filed', 'host': '${host}', 'method': 'POST', 'address': '/itg/rest/dm/requests', 'mime_type': 'application/json', 'headers': {}, 'auth': '${AUTH}', 'timeout': '${timeout}', 'file': False, 'cookies': False, 'setup': {'setup_function': False, 'premise': False}, 'clean_up': None}"}, {"name": "case_data", "value": "{'summary': 'create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM', 'skip': None, 'title': 'create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM', 'tag': 'END TO END', 'describe': {'Description': ['step1:prepare a portfolio with sub-portfolio'], 'FunctionDesigner': 'CHEN', 'Author': 'Xuanyu Liu', 'CreateDate': \"1/5/2023'\"}, 'issue': 'create scenario 01', 'premise': [['/SPM/SPM_END_TO_END/end_to_end_resource.yaml', 'get request types', 'get request types from api', {}, 'SPM1']], 'setup_function': None, 'auth': None, 'parameter': None, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': [['equal_to', '$.name', '']]}, 'validate': None, 'teardown': {'premise': False, 'function': False}}"}, {"name": "__relevance", "value": "{'host': 'https://jingrantest.dev.mfspm.com', 'common_user_pwd': 'asdf1@34', 'cookies': None, 'proxy': True, 'proxies': {'https': 'http://web-proxy.us.softwaregrp.net:8080'}, 'dbType': 'postgresql', 'global_defaultRegion_id': '100381', 'headers': 'func_header', 'timeout': 120, 'ADMIN_PASSWORD': '!QAZ@WSX3edc', 'ADMIN': 'admin', 'AUTH': ['admin', '!QAZ@WSX3edc'], 'ADMIN_FULLNAME': 'Admin User', 'ADMIN_USER_ID': 1, 'ENTERPRISE': 'Enterprise'}"}], "start": 1688550429657, "stop": 1688550433236}], "attachments": [{"name": "log", "source": "a8e00605-9a11-4ba3-a438-1eeec7af583c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'summary': 'create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM', 'skip': None, 'title': 'create a portfolio with epic can be synced to octane and octane side update some field can be synced to SPM', 'tag': 'END TO END', 'describe': {'Description': ['step1:prepare a portfolio with sub-portfolio'], 'FunctionDesigner': 'CHEN', 'Author': 'Xuanyu Liu', 'CreateDate': \"1/5/2023'\"}, 'issue': 'create scenario 01', 'premise': [['/SPM/SPM_END_TO_END/end_to_end_resource.yaml', 'get request types', 'get request types from api', {}, 'SPM1']], 'setup_function': None, 'auth': None, 'parameter': None, 'check_body': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': [['equal_to', '$.name', '']]}, 'validate': None, 'teardown': {'premise': False, 'function': False}}"}], "start": 1688550429656, "stop": 1688550433730, "uuid": "652fa635-f3a0-4620-be25-82a11b2385d4", "historyId": "239856dbfd932184477b5749a3008cd5", "testCaseId": "c8dee3891938b0ee048537335ed1ff02", "fullName": "PyDemo.testcase.SPM.SPM_END_TO_END.test_Sync_portfolio_hierarchy_info_to_Octane_product_filed.TestEnd_To_End#test_Sync_portfolio_hierarchy_info_to_Octane_product_filed", "labels": [{"name": "tag", "value": "END TO END"}, {"name": "story", "value": "Sync_portfolio_hierarchy_info_to_Octane_product_filed"}, {"name": "epic", "value": "SPM"}, {"name": "feature", "value": "END_TO_END"}, {"name": "tag", "value": "@pytest.mark.usefixtures('class_setup_and_teardown_fixture')"}, {"name": "parentSuite", "value": "PyDemo.testcase.SPM.SPM_END_TO_END"}, {"name": "suite", "value": "test_Sync_portfolio_hierarchy_info_to_Octane_product_filed"}, {"name": "subSuite", "value": "TestEnd_To_End"}, {"name": "host", "value": "MF-R0J7xzZRTZcV"}, {"name": "thread", "value": "43784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PyDemo.testcase.SPM.SPM_END_TO_END.test_Sync_portfolio_hierarchy_info_to_Octane_product_filed"}], "links": [{"type": "issue", "url": "create scenario 01", "name": "create scenario 01"}]}